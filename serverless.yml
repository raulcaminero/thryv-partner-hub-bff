service: thryv-partner-hub-bff

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${env:AWS_REGION, 'us-east-1'}
  memorySize: 512
  timeout: 30
  logRetentionInDays: 14
  environment:
    NODE_ENV: ${env:NODE_ENV, 'production'}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    AUTH0_DOMAIN: ${env:AUTH0_DOMAIN}
    AUTH0_AUDIENCE: ${env:AUTH0_AUDIENCE}
    AUTH0_JWKS_URI: ${env:AUTH0_JWKS_URI}
    JWT_ISSUER: ${env:JWT_ISSUER}
    JWT_AUDIENCE: ${env:JWT_AUDIENCE}
    DD_API_KEY: ${env:DD_API_KEY}
  DD_SERVICE: ${env:DD_SERVICE, 'thryv-partner-hub-bff'}
    DD_ENV: ${env:DD_ENV, '${self:provider.stage}'}
    DD_VERSION: ${env:DD_VERSION, '1.0.0'}
    DD_TRACE_ENABLED: ${env:DD_TRACE_ENABLED, 'true'}
    CUBE_API_URL: ${env:CUBE_API_URL}
    CUBE_API_TOKEN: ${env:CUBE_API_TOKEN}
    LOG_LEVEL: ${env:LOG_LEVEL, 'info'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"

plugins:
  - serverless-esbuild
  - serverless-offline

custom:
  esbuild:
    bundle: true
    minify: true
    sourcemap: true
    exclude:
      - aws-sdk
    target: node18
    define:
      'require.resolve': undefined
    platform: node
    concurrency: 10
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
    host: 0.0.0.0

functions:
  # Main API function - handles all HTTP requests
  api:
    handler: dist/lambda.handler
    events:
      - http:
          method: ANY
          path: /
          cors:
            origin: ${env:CORS_ORIGIN, '*'}
            headers: '*'
            allowCredentials: true
      - http:
          method: ANY
          path: /{proxy+}
          cors:
            origin: ${env:CORS_ORIGIN, '*'}
            headers: '*'
            allowCredentials: true
    environment:
      AWS_CLOUDWATCH_LOG_GROUP: !Ref ApiLogGroup
      AWS_CLOUDWATCH_LOG_STREAM: ${self:provider.stage}-api

  # Separate function for reports (can be scaled independently)
  reports:
    handler: dist/lambda.handler
    events:
      - http:
          method: GET
          path: /reports/{proxy+}
          cors:
            origin: ${env:CORS_ORIGIN, '*'}
            headers: '*'
            allowCredentials: true
    memorySize: 1024
    timeout: 60
    environment:
      AWS_CLOUDWATCH_LOG_GROUP: !Ref ReportsLogGroup
      AWS_CLOUDWATCH_LOG_STREAM: ${self:provider.stage}-reports

resources:
  Resources:
    # CloudWatch Log Groups (fixed indentation)
    ApiLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/thryv-partner-hub-bff-${self:provider.stage}-api
        RetentionInDays: 14

    ReportsLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/thryv-partner-hub-bff-${self:provider.stage}-reports
        RetentionInDays: 14

    # AppSync GraphQL API (API_KEY for dev)
    AppSyncGraphQLApi:
      Type: AWS::AppSync::GraphQLApi
      Properties:
        Name: thryv-partner-hub-bff-graphql-${self:provider.stage}
        AuthenticationType: API_KEY
        XrayEnabled: true

    AppSyncApiKey:
      Type: AWS::AppSync::ApiKey
      Properties:
        ApiId: !GetAtt AppSyncGraphQLApi.ApiId
        Expires: 4102444800

    AppSyncGraphQLSchema:
      Type: AWS::AppSync::GraphQLSchema
      Properties:
        ApiId: !GetAtt AppSyncGraphQLApi.ApiId
        Definition: |
          # Schema from src/schema.gql (code-first output)
          input CreateCustomerDto {
            dateBorn: String!
            gender: String!
            identification: String!
            lastname: String!
            name: String!
            status: String
          }

          type CustomerGql {
            createDate: String
            dateBorn: String
            gender: String
            id: ID!
            identification: String!
            lastname: String!
            name: String!
            status: String
            updateDate: String
          }

          type HealthGql {
            service: String!
            status: String!
            timestamp: String!
          }

          type Mutation {
            createCustomer(input: CreateCustomerDto!): CustomerGql!
            updateCustomer(id: String!, input: UpdateCustomerDto!): CustomerGql!
          }

          type Query {
            customer(id: String!): [CustomerGql!]!
            customers(limit: Int, page: Int, status: String): [CustomerGql!]!
            health: HealthGql!
          }

          input UpdateCustomerDto {
            dateBorn: String
            gender: String
            identification: String
            lastname: String
            name: String
            status: String
          }

          schema {
            query: Query
            mutation: Mutation
          }

    # HTTP DataSource pointing to API Gateway + /graphql (AppModule serves GraphQL at /graphql)
    AppSyncHttpDataSource:
      Type: AWS::AppSync::DataSource
      Properties:
        ApiId: !GetAtt AppSyncGraphQLApi.ApiId
        Name: BffHttpDataSource
        Type: HTTP
        HttpConfig:
          # uses generated API Gateway RestApi logical id - Serverless exposes ApiGatewayRestApi
          Endpoint: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}/graphql"

    # Example AppSync Resolver: customers -> GET /customers
    CustomersQueryResolver:
      Type: AWS::AppSync::Resolver
      Properties:
        ApiId: !GetAtt AppSyncGraphQLApi.ApiId
        TypeName: Query
        FieldName: customers
        DataSourceName: !Ref AppSyncHttpDataSource
        Kind: UNIT
        RequestMappingTemplate: |
          {
            "version": "2018-05-29",
            "method": "GET",
            "resourcePath": "/customers",
            "params": {
              "headers": {
                "Authorization": "$context.request.headers.Authorization"
              },
              "query": {
                "page": "$context.arguments.page",
                "limit": "$context.arguments.limit",
                "status": "$context.arguments.status"
              }
            }
          }
        ResponseMappingTemplate: |
          $util.toJson($context.result.body)

    # Example AppSync Resolver: customer(id) -> GET /customers/{id}
    CustomerByIdQueryResolver:
      Type: AWS::AppSync::Resolver
      Properties:
        ApiId: !GetAtt AppSyncGraphQLApi.ApiId
        TypeName: Query
        FieldName: customer
        DataSourceName: !Ref AppSyncHttpDataSource
        Kind: UNIT
        RequestMappingTemplate: |
          {
            "version": "2018-05-29",
            "method": "GET",
            "resourcePath": "/customers/${context.arguments.id}",
            "params": {
              "headers": {
                "Authorization": "$context.request.headers.Authorization"
              }
            }
          }
        ResponseMappingTemplate: |
          $util.toJson($context.result.body)

    # Example AppSync Resolver: createCustomer -> POST /customers
    CreateCustomerMutationResolver:
      Type: AWS::AppSync::Resolver
      Properties:
        ApiId: !GetAtt AppSyncGraphQLApi.ApiId
        TypeName: Mutation
        FieldName: createCustomer
        DataSourceName: !Ref AppSyncHttpDataSource
        Kind: UNIT
        RequestMappingTemplate: |
          {
            "version": "2018-05-29",
            "method": "POST",
            "resourcePath": "/customers",
            "params": {
              "headers": {
                "Authorization": "$context.request.headers.Authorization",
                "Content-Type": "application/json"
              },
              "body": $utils.toJson($context.arguments.input)
            }
          }
        ResponseMappingTemplate: |
          $util.toJson($context.result.body)

  Outputs:
    AppSyncApiId:
      Value: !GetAtt AppSyncGraphQLApi.ApiId
      Description: AppSync GraphQL API Id
    AppSyncApiKey:
      Value: !Ref AppSyncApiKey
      Description: AppSync API Key (dev)
    ApiUrl:
      Description: "API Gateway endpoint URL"
      Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"

package:
  individually: true
  exclude:
    - ./**
  include:
    - dist/**
    - node_modules/**
